#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Script d'initialisation pour l'environnement trading_env
-------------------------------------------------------

Ce script v√©rifie et installe les d√©pendances n√©cessaires pour 
le mod√®le monolithique Morningstar dans l'environnement conda trading_env.
"""

import os
import sys
import subprocess
import importlib

def check_and_install(package):
    """V√©rifie si un package est install√© et l'installe si n√©cessaire avec conda."""
    package_name = package.split('>=')[0] if '>=' in package else package
    
    try:
        importlib.import_module(package_name)
        print(f"‚úÖ {package_name} est d√©j√† install√©.")
    except ImportError:
        print(f"‚è≥ Installation de {package} avec conda...")
        try:
            subprocess.check_call(["conda", "install", "-y", package])
            print(f"‚úÖ {package} install√© avec succ√®s via conda.")
        except subprocess.CalledProcessError:
            print(f"‚ö†Ô∏è √âchec d'installation via conda. Tentative avec pip...")
            try:
                subprocess.check_call([sys.executable, "-m", "pip", "install", package])
                print(f"‚úÖ {package} install√© avec succ√®s via pip.")
            except subprocess.CalledProcessError:
                print(f"‚ùå √âchec d'installation de {package}. Installation manuelle requise.")

def init_environment():
    """Initialise l'environnement trading_env avec les d√©pendances n√©cessaires."""
    print("üîÑ Initialisation de l'environnement trading_env pour le mod√®le monolithique...")
    
    # Liste des d√©pendances
    dependencies = [
        "tensorflow",
        "numpy",
        "pandas",
        "matplotlib",
        "scikit-learn",
        "ta-lib",  # Biblioth√®que d'indicateurs techniques
        "backtrader",  # Pour le backtesting
    ]
    
    # V√©rifier et installer chaque d√©pendance
    for dep in dependencies:
        check_and_install(dep)
    
    print("\n‚úÖ Environnement trading_env configur√© avec succ√®s pour le mod√®le monolithique!")
    print("\nPour commencer √† utiliser le mod√®le monolithique:")
    print("1. Importez le mod√®le: `from ultimate.model.architecture.monolith_model import MonolithModel`")
    print("2. Cr√©ez une instance: `model = MonolithModel()`")
    print("3. Pour l'entra√Ænement: `python -m ultimate.model.training.train_monolith --help`")
    print("4. Pour le backtest: `python -m ultimate.model.run_backtest --help`")

if __name__ == "__main__":
    init_environment() 